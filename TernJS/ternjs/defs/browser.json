{
  "!name": "browser",

  "!define": {
    "canvas.context2d": {
      "canvas": "+Element",
      "width": "number", "height": "number",
      "commit": "fn()",
      "save": "fn()",
      "restore": "fn()",
      "currentTransform": "?",
      "scale": "fn(x: number, y: number)",
      "rotate": "fn(angle: number)",
      "translate": "fn(x: number, y: number)",
      "transform": "fn(a: number, b: number, c: number, d: number, e: number, f: number)",
      "setTransform": "fn(a: number, b: number, c: number, d: number, e: number, f: number)",
      "resetTransform": "fn()",
      "globalAlpha": "number",
      "globalCompositeOperation": "string",
      "imageSmoothingEnabled": "bool",
      "strokeStyle": "string",
      "fillStyle": "string",
      "createLinearGradient": "fn(x0: number, y0: number, x1: number, y1: number) -> ?",
      "createPattern": "fn(image: ?, repetition: string) -> ?",
      "shadowOffsetX": "number",
      "shadowOffsetY": "number",
      "shadowBlur": "number",
      "shadowColor": "string",
      "clearRect": "fn(x: number, y: number, w: number, h: number)",
      "fillRect": "fn(x: number, y: number, w: number, h: number)",
      "strokeRect": "fn(x: number, y: number, w: number, h: number)",
      "fillRule": "string",
      "fill": "fn()",
      "beginPath": "fn()",
      "stroke": "fn()",
      "clip": "fn()",
      "resetClip": "fn()",
      "measureText": "fn(text: string) -> ?",
      "drawImage": "fn(image: ?, dx: number, dy: number)",
      "createImageData": "fn(sw: number, sh: number) -> ?",
      "getImageData": "fn(sx: number, sy: number, sw: number, sh: number) -> ?",
      "putImageData": "fn(imagedata: ?, dx: number, dy: number)",
      "lineWidth": "number", "lineCap": "string", "lineJoin": "string", "miterLimit": "number",
      "setLineDash": "fn(segments: [number])",
      "getLineDash": "fn() -> [number]",
      "lineDashOffset": "number",
      "font": "string", "textAlign": "string", "textBaseline": "string", "direction": "string",
      "closePath": "fn()",
      "moveTo": "fn(x: number, y: number)",
      "lineTo": "fn(x: number, y: number)",
      "quadraticCurveTo": "fn(cpx: number, cpy: number, x: number, y: number)",
      "bezierCurveTo": "fn(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number)",
      "arcTo": "fn(x1: number, y1: number, x2: number, y2: number, radius: number)",
      "rect": "fn(x: number, y: number, w: number, h: number)",
      "arc": "fn(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: bool)",
      "ellipse": "fn(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, anticlockwise: bool)"
    }
  },

  "location": {
    "assign": "fn(url: string)",
    "replace": "fn(url: string)",
    "reload": "fn()",
    "origin": "string",
    "hash": "string",
    "search": "string",
    "pathname": "string",
    "port": "string",
    "hostname": "string",
    "host": "string",
    "protocol": "string",
    "href": "string"
  },

  "Node": {
    "!type": "fn()",
    "prototype": {
      "parentElement": "+Element",
      "textContent": "string",
      "baseURI": "string",
      "localName": "string",
      "prefix": "string",
      "namespaceURI": "string",
      "ownerDocument": "+Document",
      "attributes": "+NamedNodeMap",
      "nextSibling": "+Element",
      "previousSibling": "+Element",
      "lastChild": "+Element",
      "firstChild": "+Element",
      "childNodes": "+NodeList",
      "parentNode": "+Element",
      "nodeType": "number",
      "nodeValue": "string",
      "nodeName": "string",
      "tagName": "string",
      "insertBefore": "fn(newElt: +Element, before: +Element) -> +Element",
      "replaceChild": "fn(newElt: +Element, oldElt: +Element) -> +Element",
      "removeChild": "fn(oldElt: +Element) -> +Element",
      "appendChild": "fn(newElt: +Element) -> +Element",
      "hasChildNodes": "fn() -> bool",
      "cloneNode": "fn(deep: bool) -> +Element",
      "normalize": "fn()",
      "isSupported": "fn(features: string, version: number) -> bool",
      "hasAttributes": "fn() -> bool",
      "lookupPrefix": "fn(uri: string) -> string",
      "isDefaultNamespace": "fn(uri: string) -> bool",
      "lookupNamespaceURI": "fn(uri: string) -> string",
      "addEventListener": "fn(type: string, listener: fn(e: +Event), capture: bool)",
      "removeEventListener": "fn(type: string, listener: fn(), capture: bool)",
      "isSameNode": "fn(other: +Node) -> bool",
      "isEqualNode": "fn(other: +Node) -> bool",
      "compareDocumentPosition": "fn(other: +Node) -> number",
      "contains": "fn(other: +Node) -> bool",
      "dispatchEvent": "fn(event: +Event) -> bool",
      "ELEMENT_NODE": "number",
      "ATTRIBUTE_NODE": "number",
      "TEXT_NODE": "number",
      "CDATA_SECTION_NODE": "number",
      "ENTITY_REFERENCE_NODE": "number",
      "ENTITY_NODE": "number",
      "PROCESSING_INSTRUCTION_NODE": "number",
      "COMMENT_NODE": "number",
      "DOCUMENT_NODE": "number",
      "DOCUMENT_TYPE_NODE": "number",
      "DOCUMENT_FRAGMENT_NODE": "number",
      "NOTATION_NODE": "number",
      "DOCUMENT_POSITION_DISCONNECTED": "number",
      "DOCUMENT_POSITION_PRECEDING": "number",
      "DOCUMENT_POSITION_FOLLOWING": "number",
      "DOCUMENT_POSITION_CONTAINS": "number",
      "DOCUMENT_POSITION_CONTAINED_BY": "number",
      "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": "number"
    }
  },

  "Element": {
    "!type": "fn()",
    "prototype": {
      "!proto": "Node.prototype",
      "getAttribute": "fn(name: string) -> string",
      "setAttribute": "fn(name: string, value: string)",
      "removeAttribute": "fn(name: string)",
      "getAttributeNode": "fn(name: string) -> +Attr",
      "getElementsByTagName": "fn(tagName: string) -> +NodeList",
      "getElementsByTagNameNS": "fn(ns: string, tagName: string) -> +NodeList",
      "getAttributeNS": "fn(ns: string, name: string) -> string",
      "setAttributeNS": "fn(ns: string, name: string, value: string)",
      "removeAttributeNS": "fn(ns: string, name: string)",
      "getAttributeNodeNS": "fn(ns: string, name: string) -> +Attr",
      "hasAttribute": "fn(name: string) -> bool",
      "hasAttributeNS": "fn(ns: string, name: string) -> bool",
      "focus": "fn()",
      "blur": "fn()",
      "scrollIntoView": "fn(top: bool)",
      "scrollByLines": "fn(lines: number)",
      "scrollByPages": "fn(pages: number)",
      "getElementsByClassName": "fn(name: string) -> +NodeList",
      "querySelector": "fn(selectors: string) -> +Node",
      "querySelectorAll": "fn(selectors: string) -> +NodeList",
      "getClientRects": "fn() -> [+ClientRect]",
      "getBoundingClientRect": "fn() -> +ClientRect",
      "setAttributeNode": "fn(attr: +Attr) -> +Attr",
      "removeAttributeNode": "fn(attr: +Attr) -> +Attr",
      "setAttributeNodeNS": "fn(attr: +Attr) -> +Attr",
      "insertAdjacentHTML": "fn(position: string, text: string)",
      "children": "+HTMLCollection",
      "childElementCount": "number",
      "className": "string",
      "style": {
        "cssText": "string",
        "alignmentBaseline": "string",
        "background": "string",
        "backgroundAttachment": "string",
        "backgroundClip": "string",
        "backgroundColor": "string",
        "backgroundImage": "string",
        "backgroundOrigin": "string",
        "backgroundPosition": "string",
        "backgroundPositionX": "string",
        "backgroundPositionY": "string",
        "backgroundRepeat": "string",
        "backgroundRepeatX": "string",
        "backgroundRepeatY": "string",
        "backgroundSize": "string",
        "baselineShift": "string",
        "border": "string",
        "borderBottom": "string",
        "borderBottomColor": "string",
        "borderBottomLeftRadius": "string",
        "borderBottomRightRadius": "string",
        "borderBottomStyle": "string",
        "borderBottomWidth": "string",
        "borderCollapse": "string",
        "borderColor": "string",
        "borderImage": "string",
        "borderImageOutset": "string",
        "borderImageRepeat": "string",
        "borderImageSlice": "string",
        "borderImageSource": "string",
        "borderImageWidth": "string",
        "borderLeft": "string",
        "borderLeftColor": "string",
        "borderLeftStyle": "string",
        "borderLeftWidth": "string",
        "borderRadius": "string",
        "borderRight": "string",
        "borderRightColor": "string",
        "borderRightStyle": "string",
        "borderRightWidth": "string",
        "borderSpacing": "string",
        "borderStyle": "string",
        "borderTop": "string",
        "borderTopColor": "string",
        "borderTopLeftRadius": "string",
        "borderTopRightRadius": "string",
        "borderTopStyle": "string",
        "borderTopWidth": "string",
        "borderWidth": "string",
        "bottom": "string",
        "boxShadow": "string",
        "boxSizing": "string",
        "captionSide": "string",
        "clear": "string",
        "clip": "string",
        "clipPath": "string",
        "clipRule": "string",
        "color": "string",
        "colorInterpolation": "string",
        "colorInterpolationFilters": "string",
        "colorProfile": "string",
        "colorRendering": "string",
        "content": "string",
        "counterIncrement": "string",
        "counterReset": "string",
        "cursor": "string",
        "direction": "string",
        "display": "string",
        "dominantBaseline": "string",
        "emptyCells": "string",
        "enableBackground": "string",
        "fill": "string",
        "fillOpacity": "string",
        "fillRule": "string",
        "filter": "string",
        "float": "string",
        "floodColor": "string",
        "floodOpacity": "string",
        "font": "string",
        "fontFamily": "string",
        "fontSize": "string",
        "fontStretch": "string",
        "fontStyle": "string",
        "fontVariant": "string",
        "fontWeight": "string",
        "glyphOrientationHorizontal": "string",
        "glyphOrientationVertical": "string",
        "height": "string",
        "imageRendering": "string",
        "kerning": "string",
        "left": "string",
        "letterSpacing": "string",
        "lightingColor": "string",
        "lineHeight": "string",
        "listStyle": "string",
        "listStyleImage": "string",
        "listStylePosition": "string",
        "listStyleType": "string",
        "margin": "string",
        "marginBottom": "string",
        "marginLeft": "string",
        "marginRight": "string",
        "marginTop": "string",
        "marker": "string",
        "markerEnd": "string",
        "markerMid": "string",
        "markerStart": "string",
        "mask": "string",
        "maxHeight": "string",
        "maxWidth": "string",
        "minHeight": "string",
        "minWidth": "string",
        "opacity": "string",
        "orphans": "string",
        "outline": "string",
        "outlineColor": "string",
        "outlineOffset": "string",
        "outlineStyle": "string",
        "outlineWidth": "string",
        "overflow": "string",
        "overflowWrap": "string",
        "overflowX": "string",
        "overflowY": "string",
        "padding": "string",
        "paddingBottom": "string",
        "paddingLeft": "string",
        "paddingRight": "string",
        "paddingTop": "string",
        "page": "string",
        "pageBreakAfter": "string",
        "pageBreakBefore": "string",
        "pageBreakInside": "string",
        "pointerEvents": "string",
        "position": "string",
        "quotes": "string",
        "resize": "string",
        "right": "string",
        "shapeRendering": "string",
        "size": "string",
        "speak": "string",
        "src": "string",
        "stopColor": "string",
        "stopOpacity": "string",
        "stroke": "string",
        "strokeDasharray": "string",
        "strokeDashoffset": "string",
        "strokeLinecap": "string",
        "strokeLinejoin": "string",
        "strokeMiterlimit": "string",
        "strokeOpacity": "string",
        "strokeWidth": "string",
        "tabSize": "string",
        "tableLayout": "string",
        "textAlign": "string",
        "textAnchor": "string",
        "textDecoration": "string",
        "textIndent": "string",
        "textLineThrough": "string",
        "textLineThroughColor": "string",
        "textLineThroughMode": "string",
        "textLineThroughStyle": "string",
        "textLineThroughWidth": "string",
        "textOverflow": "string",
        "textOverline": "string",
        "textOverlineColor": "string",
        "textOverlineMode": "string",
        "textOverlineStyle": "string",
        "textOverlineWidth": "string",
        "textRendering": "string",
        "textShadow": "string",
        "textTransform": "string",
        "textUnderline": "string",
        "textUnderlineColor": "string",
        "textUnderlineMode": "string",
        "textUnderlineStyle": "string",
        "textUnderlineWidth": "string",
        "top": "string",
        "unicodeBidi": "string",
        "unicodeRange": "string",
        "vectorEffect": "string",
        "verticalAlign": "string",
        "visibility": "string",
        "whiteSpace": "string",
        "width": "string",
        "wordBreak": "string",
        "wordSpacing": "string",
        "wordWrap": "string",
        "writingMode": "string",
        "zIndex": "string",
        "zoom": "string"
      },
      "classList": "+DOMTokenList",
      "contentEditable": "bool",
      "firstElementChild": "+Element",
      "lastElementChild": "+Element",
      "nextElementSibling": "+Element",
      "previousElementSibling": "+Element",
      "tabIndex": "number",
      "title": "string",

      "width": "number", "height": "number",
      "getContext": "fn(id: string) -> canvas.context2d",
      "supportsContext": "fn(id: string) -> bool",

      "oncopy": "?", "oncut": "?", "onpaste": "?",
      "onbeforeunload": "?",
      "onfocus": "?", "onblur": "?",
      "onchange": "?",
      "onclick": "?", "ondblclick": "?",
      "onmousedown": "?", "onmouseup": "?", "onmousewheel": "?",
      "onmouseover": "?", "onmouseout": "?", "onmousemove": "?",
      "oncontextmenu": "?",
      "onkeydown": "?", "onkeyup": "?", "onkeypress": "?",
      "onresize": "?", "onscroll": "?",
      "ondragstart": "?", "ondragover": "?", "ondragleave": "?", "ondragenter": "?",
      "ondragend": "?", "ondrag": "?",

      "offsetTop": "number", "offsetLeft": "number",
      "offsetHeight": "number", "offsetWidth": "number",
      "scrollTop": "number", "scrollLeft": "number",
      "scrollHeight": "number", "scrollWidth": "number",
      "clientTop": "number", "clientLeft": "number",
      "clientHeight": "number", "clientWidth": "number",

      "innerHTML": "string"
    }
  },

  "Text": {
    "!type": "fn()",
    "prototype": {
      "!proto": "Node.prototype",
      "wholeText": "string",
      "splitText": "fn(offset: number) -> +Text"
    }
  },

  "Document": {
    "!type": "fn()",
    "prototype": {
      "!proto": "Node.prototype",
      "activeElement": "+Element",
      "compatMode": "string",
      "designMode": "string",
      "dir": "string",
      "height": "number",
      "width": "number",
      "characterSet": "string",
      "readyState": "string",
      "defaultCharset": "string",
      "charset": "string",
      "location": "location",
      "lastModified": "string",
      "head": "+Element",
      "body": "+Element",
      "cookie": "string",
      "URL": "string",
      "domain": "string",
      "referrer": "string",
      "title": "string",
      "defaultView": {},
      "documentURI": "string",
      "xmlStandalone": "bool",
      "xmlVersion": "?",
      "xmlEncoding": "?",
      "inputEncoding": "string",
      "documentElement": "+Element",
      "implementation": {
        "hasFeature": "fn(feature: string, version: number) -> bool",
        "createDocumentType": "fn(qualifiedName: string, publicId: string, systemId: string) -> +Node",
        "createCSSStyleSheet": "fn() -> +Node",
        "createHTMLDocument": "fn(title: string) -> +Document",
        "createDocument": "fn(namespaceURI: string, qualifiedName: string, type: +Node) -> +Document"
      },
      "doctype": "+Node",
      "open": "fn()",
      "close": "fn()",
      "write": "fn(html: string)",
      "writeln": "fn(html: string)",
      "clear": "fn()",
      "hasFocus": "fn() -> bool",
      "createElement": "fn(tagName: string) -> +Element",
      "createElementNS": "fn(ns: string, tagName: string) -> +Element",
      "createDocumentFragment": "fn() -> +DocumentFragment",
      "createTextNode": "fn(content: string) -> +Text",
      "createComment": "fn(content: string) -> +Node",
      "createCDATASection": "fn(content: string) -> +Node",
      "createProcessingInstruction": "fn(content: string) -> +Node",
      "createAttribute": "fn(name: string) -> +Attr",
      "createAttributeNS": "fn(ns: string, name: string) -> +Attr",
      "importNode": "fn(node: +Node, deep: bool) -> +Element",
      "getElementById": "fn(id: string) -> +Element",
      "getElementsByTagName": "fn(tagName: string) -> +NodeList",
      "getElementsByTagNameNS": "fn(ns: string, tagName: string) -> +NodeList",
      "createEvent": "fn(type: string) -> +Event",
      "createRange": "fn() -> +Range",
      "evaluate": "fn(expr: ?) -> +XPathResult",
      "execCommand": "fn(cmd: string)",
      "queryCommandEnabled": "fn(cmd: string) -> bool",
      "queryCommandIndeterm": "fn(cmd: string) -> bool",
      "queryCommandState": "fn(cmd: string) -> bool",
      "queryCommandSupported": "fn(cmd: string) -> bool",
      "queryCommandValue": "fn(cmd: string) -> string",
      "getElementsByName": "fn(name: string) -> +HTMLCollection",
      "elementFromPoint": "fn(x: number, y: number) -> +Element",
      "getSelection": "fn() -> +Selection",
      "adoptNode": "fn(node: +Node) -> +Element",
      "createTreeWalker": "fn(root: +Node, mask: number) -> ?",
      "createExpression": "fn(text: string) -> ?",
      "createNSResolver": "fn(node: +Node)",
      "scripts": "+HTMLCollection",
      "plugins": "+HTMLCollection",
      "embeds": "+HTMLCollection",
      "anchors": "+HTMLCollection",
      "links": "+HTMLCollection",
      "forms": "+HTMLCollection",
      "styleSheets": "+HTMLCollection"
    }
  },
  "document": "+Document",
  "XMLDocument": {
    "!type": "fn()",
    "prototype": "Document.prototype"
  },

  "Attr": {
    "!type": "fn()",
    "prototype": {
      "isId": "bool",
      "name": "string",
      "value": "string"
    }
  },

  "NodeList": {
    "!type": "fn()",
    "prototype": {
      "length": "number",
      "item": "fn(i: number) -> +Element",
      "<i>": "+Element"
    }
  },
  "HTMLCollection": {
    "!type": "fn()",
    "prototype": {
      "length": "number",
      "item": "fn(i: number) -> +Element",
      "namedItem": "fn(name: string) -> +Element",
      "<i>": "+Element"
    }
  },

  "NamedNodeMap": {
    "!type": "fn()",
    "prototype": {
      "length": "number",
      "getNamedItem": "fn(name: string) -> +Node",
      "setNamedItem": "fn(node: +Node) -> +Node",
      "removeNamedItem": "fn(name: string) -> +Node",
      "item": "fn(i: number) -> +Node",
      "getNamedItemNS": "fn(ns: string, name: string) -> +Node",
      "setNamedItemNS": "fn(node: +Node) -> +Node",
      "removeNamedItemNS": "fn(ns: string, name: string) -> +Node",
      "<i>": "+Node"
    }
  },

  "DocumentFragment": {
    "!type": "fn()",
    "prototype": {
      "!proto": "Node.prototype"
    }
  },

  "DOMTokenList": {
    "!type": "fn()",
    "prototype": {
      "length": "number",
      "item": "fn(i: number) -> string",
      "contains": "fn(token: string) -> bool",
      "add": "fn(token: string)",
      "remove": "fn(token: string)",
      "toggle": "fn(token: string) -> bool",
      "<i>": "string"
    }
  },

  "XPathResult": {
    "!type": "fn()",
    "prototype": {
      "boolValue": "bool",
      "invalidIteratorState": "bool",
      "numberValue": "number",
      "resultType": "number",
      "singleNodeValue": "+Element",
      "snapshotLength": "number",
      "stringValue": "string",
      "iterateNext": "fn()",
      "snapshotItem": "fn()",
      "ANY_TYPE": "number",
      "NUMBER_TYPE": "number",
      "STRING_TYPE": "number",
      "BOOL_TYPE": "number",
      "UNORDERED_NODE_ITERATOR_TYPE": "number",
      "ORDERED_NODE_ITERATOR_TYPE": "number",
      "UNORDERED_NODE_SNAPSHOT_TYPE": "number",
      "ORDERED_NODE_SNAPSHOT_TYPE": "number",
      "ANY_UNORDERED_NODE_TYPE": "number",
      "ANY_TYPE": "number",
      "FIRST_ORDERED_NODE_TYPE": "number"
    }
  },

  "ClientRect": {
    "!type": "fn()",
    "prototype": {
      "top": "number", "left": "number", "bottom": "number", "right": "number"
    }
  },

  "Event": {
    "!type": "fn()",
    "prototype": {
      "stopPropagation": "fn()",
      "preventDefault": "fn()",
      "initEvent": "fn(type: string, bubbles: bool, cancelable: bool)",
      "stopImmediatePropagation": "fn()",
      "NONE": "number",
      "CAPTURING_PHASE": "number",
      "AT_TARGET": "number",
      "BUBBLING_PHASE": "number",
      "MOUSEDOWN": "number",
      "MOUSEUP": "number",
      "MOUSEOVER": "number",
      "MOUSEOUT": "number",
      "MOUSEMOVE": "number",
      "MOUSEDRAG": "number",
      "CLICK": "number",
      "DBLCLICK": "number",
      "KEYDOWN": "number",
      "KEYUP": "number",
      "KEYPRESS": "number",
      "DRAGDROP": "number",
      "FOCUS": "number",
      "BLUR": "number",
      "SELECT": "number",
      "CHANGE": "number",
      "target": "+Element",
      "relatedTarget": "+Element",
      "pageX": "number", "pageY": "number", "clientX": "number", "clientY": "number",
      "keyCode": "number", "charCode": "number", "which": "number", "button": "number",
      "shiftKey": "bool", "ctrlKey": "bool", "altKey": "bool", "metaKey": "bool",
      "returnValue": "bool", "cancelBubble": "bool",
      "dataTransfer": {
        "dropEffect": "string",
        "effectAllowed": "string",
        "files": "+FileList",
        "types": "[string]",
        "addElement": "fn(element: +Element)",
        "clearData": "fn()",
        "getData": "fn(type: string) -> string",
        "setData": "fn(type: string, data: string)",
        "setDragImage": "fn(image: +Element)"
      }
    }
  },
  "TouchEvent": {"!type": "fn()", "prototype": "Event.prototype"},
  "WheelEvent": {"!type": "fn()", "prototype": "Event.prototype"},
  "MouseEvent": {"!type": "fn()", "prototype": "Event.prototype"},
  "KeyboardEvent": {"!type": "fn()", "prototype": "Event.prototype"},
  "HashChangeEvent": {"!type": "fn()", "prototype": "Event.prototype"},
  "ErrorEvent": {"!type": "fn()", "prototype": "Event.prototype"},
  "CustomEvent": {"!type": "fn()", "prototype": "Event.prototype"},
  "BeforeLoadEvent": {"!type": "fn()", "prototype": "Event.prototype"},
  
  "WebSocket": {
    "!type": "fn(url: string)",
    "prototype": {
      "close": "fn()",
      "send": "fn(data: string)",
      "binaryType": "string",
      "bufferedAmount": "number",
      "extensions": "string",
      "onclose": "?", "onerror": "?", "onmessage": "?", "onopen": "?",
      "protocol": "string",
      "url": "string",
      "CONNECTING": "number", "OPEN": "number", "CLOSING": "number", "CLOSED": "number"
    }
  },

  "Worker": {
    "!type": "fn(scriptURL: string)",
    "prototype": {
      "postMessage": "fn(message: ?)",
      "terminate": "fn()",
      "onmessage": "?", "onerror": "?"
    }
  },

  "SharedWorker": {
    "!type": "fn(scriptURL: string)",
    "prototype": "Worker.prototype"
  },

  "localStorage": {
    "setItem": "fn(name: string, value: string)",
    "getItem": "fn(name: string) -> string"
  },
  "sessionStorage": {
    "setItem": "fn(name: string, value: string)",
    "getItem": "fn(name: string) -> string"
  },

  "FileList": {
    "!type": "fn()",
    "prototype": {
      "length": "number",
      "item": "fn(i: number) -> +File",
      "<i>": "+File"
    }
  },
  "File": {
    "!type": "fn()",
    "prototype": {
      "!proto": "Blob.prototype",
      "fileName": "string",
      "fileSize": "number",
      "lastModifiedDate": "?",
      "name": "string"
    }
  },
  "Blob": {
    "!type": "fn(parts: [?], properties?: ?)",
    "prototype": {
      "size": "number",
      "type": "string",
      "slice": "fn(start: number, end?: number, type?: string) -> +Blob"
    }
  },
  "FileReader": {
    "!type": "fn()",
    "prototype": {
      "abort": "fn()",
      "readAsArrayBuffer": "fn(blob: +Blob)",
      "readAsBinaryString": "fn(blob: +Blob)",
      "readAsDataURL": "fn(blob: +Blob)",
      "readAsText": "fn(blob: +Blob, encoding?: string)",
      "EMPTY": "number", "LOADING": "number", "DONE": "number",
      "error": "?",
      "readyState": "number",
      "result": "?",
      "onabort": "?", "onerror": "?",
      "onload": "?", "onloadend": "?", "onloadstart": "?", "onprogress": "?"
    }
  },

  "Range": {
    "!type": "fn()",
    "prototype": {
      "collapsed": "bool",
      "commonAncestorContainer": "+Element",
      "endContainer": "+Element",
      "endOffset": "number",
      "startContainer": "+Element",
      "startOffset": "number",
      "setStart": "fn(node: +Element, offset: number)",
      "setEnd": "fn(node: +Element, offset: number)",
      "setStartBefore": "fn(node: +Element)",
      "setStartAfter": "fn(node: +Element)",
      "setEndBefore": "fn(node: +Element)",
      "setEndAfter": "fn(node: +Element)",
      "selectNode": "fn(node: +Element)",
      "selectNodeContents": "fn(node: +Element)",
      "collapse": "fn(toStart: bool)",
      "cloneContents": "fn() -> +DocumentFragment",
      "deleteContents": "fn()",
      "extractContents": "fn() -> +DocumentFragment",
      "insertNode": "fn(node: +Element)",
      "surroundContents": "fn(node: +Element)",
      "compareBoundaryPoints": "fn(how: number, other: +Range) -> number",
      "cloneRange": "fn() -> +Range",
      "detach": "fn()",
      "END_TO_END": "number", "END_TO_START": "number", "START_TO_END": "number", "START_TO_START": "number"
    }
  },

  "XMLHttpRequest": {
    "!type": "fn()",
    "prototype": {
      "abort": "fn()",
      "getAllResponseHeaders": "fn() -> string",
      "getResponseHeader": "fn(header: string) -> string",
      "open": "fn(method: string, url: string, async?: bool, user?: string, password?: string)",
      "overrideMimeType": "fn(type: string)",
      "send": "fn(data?: string)",
      "setRequestHeader": "fn(header: string, value: string)",
      "onreadystatechange": "fn()",
      "readyState": "number",
      "response": "+Document",
      "responseText": "string",
      "responseType": "string",
      "timeout": "number",
      "UNSENT": "number", "OPENED": "number", "HEADERS_RECEIVED": "number", "LOADING": "number", "DONE": "number"
    }
  },

  "DOMParser": {
    "!type": "fn()",
    "prototype": {
      "parseFromString": "fn(data: string, mime: string) -> +Document"
    }
  },

  "Selection": {
    "!type": "fn()",
    "prototype": {
      "anchorNode": "+Element",
      "anchorOffset": "number",
      "focusNode": "+Element",
      "focusOffset": "number",
      "isCollapsed": "bool",
      "rangeCount": "number",
      "getRangeAt": "fn(i: number) -> +Range",
      "collapse": "fn()",
      "extend": "fn(node: +Element, offset: number)",
      "collapseToStart": "fn()",
      "collapseToEnd": "fn()",
      "selectAllChildren": "fn(node: +Element)",
      "addRange": "fn(range: +Range)",
      "removeRange": "fn(range: +Range)",
      "removeAllRanges": "fn()",
      "deleteFromDocument": "fn()",
      "containsNode": "fn(node: +Element) -> bool"
    }
  },

  "console": {
    "debug": "fn(text: string)",
    "error": "fn(text: string)",
    "info": "fn(text: string)",
    "log": "fn(text: string)",
    "warn": "fn(text: string)"
  },

  "top": "<top>",
  "parent": "<top>",
  "window": "<top>",
  "opener": "<top>",
  "self": "<top>",
  
  "devicePixelRatio": "number",

  "name": "string",
  "closed": "bool",

  "pageYOffset": "number",
  "pageXOffset": "number",
  "scrollY": "number",
  "scrollX": "number",
  "screenTop": "number",
  "screenLeft": "number",
  "screenY": "number",
  "screenX": "number",
  "innerWidth": "number",
  "innerHeight": "number",
  "outerWidth": "number",
  "outerHeight": "number",

  "frameElement": "+Element",

  "crypto": {
    "getRandomValues": "fn([number])"
  },

  "navigator": {
    "appName": "string",
    "appVersion": "string",
    "language": "string",
    "platform": "string",
    "plugins": "[?]",
    "userAgent": "string",
    "vendor": "string",
    "javaEnabled": "bool"
  },

  "history": {
    "state": "?",
    "length": "number",
    "go": "fn(delta: number)",
    "forward": "fn()",
    "back": "fn()",
    "pushState": "fn(data: ?, title: string, url?: string)",
    "replaceState": "fn(data: ?, title: string, url?: string)"
  },

  "screen": {
    "availWidth": "number",
    "availHeight": "number",
    "availTop": "number",
    "availLeft": "number",
    "pixelDepth": "number",
    "colorDepth": "number",
    "width": "number",
    "height": "number"
  },

  "postMessage": "fn(message: string, targetOrigin: string)",

  "close": "fn()",
  "blur": "fn()",
  "focus": "fn()",

  "onload": "?", "onunload": "?",
  "onscroll": "?", "onresize": "?",
  "onpageshow": "?", "onpagehide": "?",
  "ononline": "?", "onoffline": "?",
  "onmousewheel": "?", "onmouseup": "?", "onmouseover": "?", "onmouseout": "?",
  "onmousemove": "?", "onmousedown": "?",
  "onclick": "?", "ondblclick": "?",
  "onmessage": "?",
  "onkeyup": "?", "onkeypress": "?", "onkeydown": "?",
  "oninput": "?",
  "onpopstate": "?", "onhashchange": "?",
  "onfocus": "?", "onblur": "?",
  "onerror": "?",
  "ondrop": "?", "ondragstart": "?", "ondragover": "?", "ondragleave": "?",
  "ondragenter": "?", "ondragend": "?", "ondrag": "?",
  "oncontextmenu": "?",
  "onchange": "?",
  "onbeforeunload": "?",
  "onabort": "?",

  "getSelection": "fn() -> +Selection",

  "alert": "fn(message: string)",
  "confirm": "fn(message: string) -> bool",
  "prompt": "fn(message: string, value: string) -> string",

  "scrollBy": "fn(x: number, y: number)",
  "scrollTo": "fn(x: number, y: number)",
  "scroll": "fn(x: number, y: number)",
 
  "setTimeout": "fn(f: fn(), ms: number) -> number",
  "clearTimeout": "fn(timeout: number)",
  "setInterval": "fn(f: fn(), ms: number) -> number",
  "clearInterval": "fn(interval: number)",

  "atob": "fn(encoded: string) -> string",
  "btoa": "fn(data: string) -> string",

  "addEventListener": {
    "!type": "fn(type: string, listener: fn(e: +Event), capture: bool)",
    "!effects": ["call $1 +Event"]
  },
  "removeEventListener": "fn(type: string, listener: fn(), capture: bool)",
  "dispatchEvent": "fn(event: +Event) -> bool",

  "getComputedStyle": "fn(node: +Element, pseudo?: string) -> Element.prototype.style"
}
