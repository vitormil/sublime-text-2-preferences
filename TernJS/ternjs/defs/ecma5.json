{
  "!name": "ecma5",
  "Infinity": "number",
  "undefined": "?",
  "NaN": "number",
  "Object": {
    "!type": "fn()",
    "getPrototypeOf": "fn(obj: ?) -> ?",
    "create": "fn(proto: ?) -> $custom:Object_create",
    "defineProperty": "fn(obj: ?, prop: string, desc: ?)",
    "defineProperties": "fn(obj: ?, props: ?)",
    "getOwnPropertyDescriptor": "fn(obj: ?, prop: string) -> ?",
    "keys": "fn(obj: ?) -> [string]",
    "getOwnPropertyNames": "fn(obj: ?) -> [string]",
    "seal": "fn(obj: ?)",
    "isSealed": "fn(obj: ?) -> bool",
    "freeze": "fn(obj: ?)",
    "isFrozen": "fn(obj: ?) -> bool",
    "prototype": {
      "!stdProto": "Object",
      "toString": "fn() -> string",
      "toLocaleString": "fn() -> string",
      "valueOf": "fn() -> number",
      "hasOwnProperty": "fn(prop: string) -> bool",
      "propertyIsEnumerable": "fn(prop: string) -> bool"
    }
  },
  "Function": {
    "!type": "fn(body: string)",
    "prototype": {
      "!stdProto": "Function",
      "apply": "fn(this: ?, args: [?]) -> $this.$ret",
      "call": {
        "!type": "fn(this: ?, args?: ?) -> $this.$ret",
        "!effects": ["call $this this=$0 $1 $2 $3 $4"]
      },
      "bind": "fn(this: ?) -> fn()"
    }
  },
  "Array": {
    "!type": "fn(size: number) -> [?]",
    "isArray": "fn(value: ?) -> bool",
    "prototype": {
      "!stdProto": "Array",
      "length": "number",
      "concat": "fn(other: [?]) -> $this",
      "join": "fn(separator?: string) -> string",
      "splice": "fn(pos: number, amount: number)",
      "pop": "fn() -> $this.<i>",
      "push": {
        "!type": "fn(newelt: ?) -> number",
        "!effects": ["propagate $0 $this.<i>"]
      },
      "shift": "fn() -> $this.<i>",
      "unshift": {
        "!type": "fn(newelt: ?) -> number",
        "!effects": ["propagate $0 $this.<i>"]
      },
      "slice": "fn(from: number, to?: number) -> $this",
      "reverse": "fn()",
      "sort": {
        "!type": "fn(compare?: fn(a: ?, b: ?) -> number)",
        "!effects": ["call $0 $this.<i> $this.<i>"]
      },
      "indexOf": "fn(elt: ?, from?: number) -> number",
      "lastIndexOf": "fn(elt: ?, from?: number) -> number",
      "every": {
        "!type": "fn(test: fn(elt: ?, i: number) -> bool, context?: ?) -> bool",
        "!effects": ["call $0 this=$1 $this.<i> number"]
      },
      "some": {
        "!type": "fn(test: fn(elt: ?, i: number) -> bool, context?: ?) -> bool",
        "!effects": ["call $0 this=$1 $this.<i> number"]
      },
      "filter": {
        "!type": "fn(test: fn(elt: ?, i: number) -> bool, context?: ?) -> $this",
        "!effects": ["call $0 this=$1 $this.<i> number"]
      },
      "forEach": {
        "!type": "fn(f: fn(elt: ?, i: number), context?: ?)",
        "!effects": ["call $0 this=$1 $this.<i> number"]
      },
      "map": {
        "!type": "fn(f: fn(elt: ?, i: number) -> ?, context?: ?) -> [$0.$ret]",
        "!effects": ["call $0 this=$1 $this.<i> number"]
      },
      "reduce": {
        "!type": "fn(combine: fn(sum: ?, elt: ?, i: number) -> ?, init?: ?) -> $0.$ret",
        "!effects": ["call $0 $1 $this.<i> number"]
      },
      "reduceRight": {
        "!type": "fn(combine: fn(sum: ?, elt: ?, i: number) -> ?, init?: ?) -> $0.$ret",
        "!effects": ["call $0 $1 $this.<i> number"]
      }
    }
  },
  "String": {
    "!type": "fn(value: ?) -> string",
    "fromCharCode": "fn(code: number) -> string",
    "prototype": {
      "!stdProto": "String",
      "length": "number",
      "charAt": "fn(i: number) -> string",
      "charCodeAt": "fn(i: number) -> number",
      "indexOf": "fn(char: string, from?: number) -> number",
      "lastIndexOf": "fn(char: string, from?: number) -> number",
      "substring": "fn(from: number, to?: number) -> string",
      "substr": "fn(from: number, length?: number) -> string",
      "slice": "fn(from: number, to?: number) -> string",
      "trim": "fn() -> string",
      "trimLeft": "fn() -> string",
      "trimRight": "fn() -> string",
      "toUpperCase": "fn() -> string",
      "toLowerCase": "fn() -> string",
      "toLocaleUpperCase": "fn() -> string",
      "toLocaleLowerCase": "fn() -> string",
      "split": "fn(pattern: string) -> [string]",
      "concat": "fn(other: string) -> string",
      "localeCompare": "fn(other: string) -> number",
      "match": "fn(pattern: +RegExp) -> [string]",
      "replace": "fn(pattern: +RegExp, replacement: string) -> string",
      "search": "fn(pattern: +RegExp) -> number"
    }
  },
  "Number": {
    "!type": "fn(value: ?) -> number",
    "MAX_VALUE": "number",
    "MIN_VALUE": "number",
    "POSITIVE_INFINITY": "number",
    "NEGATIVE_INFINITY": "number",
    "prototype": {
      "!stdProto": "Number",
      "toString": "fn(radix?: number) -> string",
      "toFixed": "fn(digits: number) -> string",
      "toExponential": "fn(digits: number) -> string"
    }
  },
  "Boolean": {
    "!type": "fn(value: ?) -> bool",
    "prototype": {"!stdProto": "Boolean"}
  },
  "RegExp": {
    "!type": "fn(source: string, flags?: string)",
    "prototype": {
      "!stdProto": "RegExp",
      "exec": "fn(input: string) -> [string]",
      "compile": "fn(source: string, flags?: string)",
      "test": "fn(input: string) -> bool",
      "global": "bool",
      "ignoreCase": "bool",
      "multiline": "bool",
      "source": "string",
      "lastIndex": "number"
    }
  },
  "Date": {
    "!type": "fn(ms: number)",
    "parse": "fn(source: string) -> +Date",
    "UTC": "fn(year: number, month: number, date: number, hour?: number, min?: number, sec?: number, ms?: number) -> number",
    "now": "fn() -> number",
    "prototype": {
      "toUTCString": "fn() -> string",
      "toISOString": "fn() -> string",
      "toDateString": "fn() -> string",
      "toTimeString": "fn() -> string",
      "toLocaleDateString": "fn() -> string",
      "toLocaleTimeString": "fn() -> string",
      "getTime": "fn() -> number",
      "getFullYear": "fn() -> number",
      "getYear": "fn() -> number",
      "getMonth": "fn() -> number",
      "getUTCMonth": "fn() -> number",
      "getDate": "fn() -> number",
      "getUTCDate": "fn() -> number",
      "getDay": "fn() -> number",
      "getUTCDay": "fn() -> number",
      "getHours": "fn() -> number",
      "getUTCHours": "fn() -> number",
      "getMinutes": "fn() -> number",
      "getUTCMinutes": "fn() -> number",
      "getSeconds": "fn() -> number",
      "getUTCSeconds": "fn() -> number",
      "getMilliseconds": "fn() -> number",
      "getUTCMilliseconds": "fn() -> number",
      "getTimezoneOffset": "fn() -> number",
      "setTime": "fn(date: +Date) -> number",
      "setFullYear": "fn(year: number) -> number",
      "setUTCFullYear": "fn(year: number) -> number",
      "setMonth": "fn(month: number) -> number",
      "setUTCMonth": "fn(month: number) -> number",
      "setDate": "fn(day: number) -> number",
      "setUTCDate": "fn(day: number) -> number",
      "setHours": "fn(hour: number) -> number",
      "setUTCHours": "fn(hour: number) -> number",
      "setMinutes": "fn(min: number) -> number",
      "setUTCMinutes": "fn(min: number) -> number",
      "setSeconds": "fn(sec: number) -> number",
      "setUTCSeconds": "fn(sec: number) -> number",
      "setMilliseconds": "fn(ms: number) -> number",
      "setUTCMilliseconds": "fn(ms: number) -> number"
    }
  },
  "Error": {
    "!type": "fn(message: string)",
    "prototype": {
      "name": "string",
      "message": "string"
    }
  },
  "SyntaxError": "fn(message_FIXME_needs_proto: string)",
  "ReferenceError": "fn(message: string)",
  "URIError": "fn(message: string)",
  "EvalError": "fn(message: string)",
  "RangeError": "fn(message: string)",
  "parseInt": "fn(string: string, radix?: number) -> number",
  "parseFloat": "fn(string: string) -> number",
  "isNaN": "fn(value: number) -> bool",
  "eval": "fn(code: string) -> ?",
  "encodeURI": "fn(uri: string) -> string",
  "encodeURIComponent": "fn(uir: string) -> string",
  "decodeURI": "fn(uri: string) -> string",
  "decodeURIComponent": "fn(uri: string) -> string",
  "Math": {
    "E": "number", "LN2": "number", "LN10": "number", "LOG2E": "number", "LOG10E": "number",
    "SQRT1_2": "number", "SQRT2": "number", "PI": "number",
    "abs": "fn(number) -> number",
    "cos": "fn(number) -> number",
    "sin": "fn(number) -> number",
    "tan": "fn(number) -> number",
    "acos": "fn(number) -> number",
    "asin": "fn(number) -> number",
    "atan": "fn(number) -> number",
    "atan2": "fn(number, number) -> number",
    "ceil": "fn(number) -> number",
    "floor": "fn(number) -> number",
    "round": "fn(number) -> number",
    "exp": "fn(number) -> number",
    "log": "fn(number) -> number",
    "sqrt": "fn(number) -> number",
    "pow": "fn(number, number) -> number",
    "max": "fn(number, number) -> number",
    "min": "fn(number, number) -> number",
    "random": "fn() -> number"
  },
  "JSON": {
    "parse": "fn(json: string) -> ?",
    "stringify": "fn(value: ?) -> string"
  }
}
