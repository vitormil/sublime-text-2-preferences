....F...FF...F..FF...F..F.........F..F.....F.F.F......F...F.....F................F......F.....FF.........................F....F..F....FF..F..F....F......F..........F..F.........FFFF...F............F.....F....F......F.................F......F............................................F.............FF........F...................F....................F.....................F....F........................FFFFFFFFF.FFFFFFFFF...............................................F....F.........F.......F..F..F............................FFFF.........................F........FFF.FFF..FF...F..F..F....................................F.............................FF.........FF.FFFF.FFFF........................................................FFFF...F.FFFF....FF.............F....F........................F.................................F.....FF.....
======================================================================
FAIL: test_baa (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'break-after always' and test: 'background-attachment '

======================================================================
FAIL: test_bac (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'break-after column' and test: 'background-color '

======================================================================
FAIL: test_bacl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'background-attachment local' and test: 'background-clip '

======================================================================
FAIL: test_bact (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'background-attachment ' and test: 'background-color transparent'

======================================================================
FAIL: test_ban (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'background-attachment ' and test: 'background none'

======================================================================
FAIL: test_bao (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'bottom auto' and test: 'background-origin '

======================================================================
FAIL: test_bap (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'break-after page' and test: 'background-position '

======================================================================
FAIL: test_bar (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'break-after right' and test: 'background-repeat '

======================================================================
FAIL: test_basico (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'background-size contain' and test: 'background-size cover'

======================================================================
FAIL: test_bbn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'border-bottom-style none' and test: 'border-bottom none'

======================================================================
FAIL: test_bd:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'border-style none' and test: 'border none'

======================================================================
FAIL: test_bdb:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'border-bottom-style none' and test: 'border-bottom none'

======================================================================
FAIL: test_bdbr: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'border-break ' and test: 'box-decoration-break '

======================================================================
FAIL: test_bdcl: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'border-color ' and test: 'border-collapse '

======================================================================
FAIL: test_bdl:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'border-left-style none' and test: 'border-left none'

======================================================================
FAIL: test_bdr:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'border-right-style none' and test: 'border-right none'

======================================================================
FAIL: test_bdt:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'border-top-style none' and test: 'border-top none'

======================================================================
FAIL: test_bg:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'background-image none' and test: 'background none'

======================================================================
FAIL: test_bgc:t (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'background-clip content-box' and test: 'background-color transparent'

======================================================================
FAIL: test_bgcp: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'background-clip padding-box' and test: 'background-clip '

======================================================================
FAIL: test_bln (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'border-length ' and test: 'border-left none'

======================================================================
FAIL: test_bocl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'border-color ' and test: 'border-collapse '

======================================================================
FAIL: test_bon (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'background-origin ' and test: 'border none'

======================================================================
FAIL: test_brn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'background-repeat no-repeat' and test: 'border-right none'

======================================================================
FAIL: test_brs (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'background-repeat space' and test: 'border-right-style '

======================================================================
FAIL: test_bs: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'box-shadow ' and test: 'box-sizing '

======================================================================
FAIL: test_bsd (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'border-style dashed' and test: 'border-style dotted'

======================================================================
FAIL: test_bsi (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'box-shadow inset' and test: 'border-style inset'

======================================================================
FAIL: test_btn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'border-width thin' and test: 'border-top none'

======================================================================
FAIL: test_c:f (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'cursor default' and test: 'color #FFF'

======================================================================
FAIL: test_cl: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'clear left' and test: 'clear '

======================================================================
FAIL: test_cn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'cursor none' and test: 'clear none'

======================================================================
FAIL: test_coi: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'content icon' and test: 'counter-increment '

======================================================================
FAIL: test_con (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'content none' and test: 'content normal'

======================================================================
FAIL: test_conoq (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'content no-open-quote' and test: 'content open-quote'

======================================================================
FAIL: test_cp: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'cursor pointer' and test: 'clip '

======================================================================
FAIL: test_ct:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'content none' and test: 'content normal'

======================================================================
FAIL: test_ctn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'content none' and test: 'content normal'

======================================================================
FAIL: test_cua (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'cursor alias' and test: 'cursor auto'

======================================================================
FAIL: test_cucr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'cursor col-resize' and test: 'cursor crosshair'

======================================================================
FAIL: test_cur:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'cursor alias' and test: 'cursor auto'

======================================================================
FAIL: test_cur:cr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'cursor col-resize' and test: 'cursor crosshair'

======================================================================
FAIL: test_d:tc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'display table-caption' and test: 'display table-cell'

======================================================================
FAIL: test_dir (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'direction rtl' and test: 'direction '

======================================================================
FAIL: test_dir: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'direction rtl' and test: 'direction '

======================================================================
FAIL: test_dtc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'display table-caption' and test: 'display table-cell'

======================================================================
FAIL: test_fdb (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'flex-direction block' and test: 'flex-direction bt'

======================================================================
FAIL: test_fl: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'float left' and test: 'float '

======================================================================
FAIL: test_fst: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'font-style ' and test: 'font-stretch '

======================================================================
FAIL: test_fst:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'font-style normal' and test: 'font-stretch normal'

======================================================================
FAIL: test_fw1 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw2 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw3 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw4 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw5 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw6 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw7 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw8 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw9 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw:1 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw:2 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw:3 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw:4 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw:5 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw:6 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw:7 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw:8 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_fw:9 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_ls:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'letter-spacing normal' and test: 'list-style none'

======================================================================
FAIL: test_lsn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'list-style: ' and test: 'list-style none'

======================================================================
FAIL: test_lst:d (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'list-style-type decimal' and test: 'list-style-type disc'

======================================================================
FAIL: test_lstd (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'list-style-type decimal' and test: 'list-style-type disc'

======================================================================
FAIL: test_lstl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'list-style-type lower-alpha' and test: 'list-style-type lower-roman'

======================================================================
FAIL: test_lstu (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'list-style-type upper-alpha' and test: 'list-style-type upper-roman'

======================================================================
FAIL: test_mstal: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_mstov: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_mswm (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_mswm: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_o:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'overflow hidden' and test: 'outline none'

======================================================================
FAIL: test_or:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'overflow auto' and test: 'orientation auto'

======================================================================
FAIL: test_or:l (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'overflow scroll' and test: 'orientation landscape'

======================================================================
FAIL: test_or:p (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_oria (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'orientation ' and test: 'orientation auto'

======================================================================
FAIL: test_oril (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'overflow visible' and test: 'orientation landscape'

======================================================================
FAIL: test_orip (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_os: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'overflow scroll' and test: 'outline-style '

======================================================================
FAIL: test_os:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_oun (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'outline ' and test: 'outline none'

======================================================================
FAIL: test_ousn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_ov: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'overflow visible' and test: 'overflow '

======================================================================
FAIL: test_pos: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'position static' and test: 'position '

======================================================================
FAIL: test_ta (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'top auto' and test: 'text-align '

======================================================================
FAIL: test_ta: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'top auto' and test: 'text-align '

======================================================================
FAIL: test_tal (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'text-align left' and test: 'text-align-last '

======================================================================
FAIL: test_tal: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'text-align left' and test: 'text-align-last '

======================================================================
FAIL: test_tal:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'text-align center' and test: 'text-align-last center'

======================================================================
FAIL: test_tal:j (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'text-align justify' and test: 'text-align-last justify'

======================================================================
FAIL: test_tal:l (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'text-align left' and test: 'text-align-last left'

======================================================================
FAIL: test_tal:r (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'text-align right' and test: 'text-align-last right'

======================================================================
FAIL: test_talc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'text-align center' and test: 'text-align-last center'

======================================================================
FAIL: test_talj (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'text-align justify' and test: 'text-align-last justify'

======================================================================
FAIL: test_tall (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'text-align left' and test: 'text-align-last left'

======================================================================
FAIL: test_talr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'text-align right' and test: 'text-align-last right'

======================================================================
FAIL: test_tom (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'transform matrix()' and test: 'text-overflow-mode '

======================================================================
FAIL: test_tomc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'text-transform capitalize' and test: 'text-overflow-mode clip'

======================================================================
FAIL: test_tome (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'text-overflow-mode ' and test: 'text-overflow-mode ellipsis'

======================================================================
FAIL: test_tomew (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'transform skew()' and test: 'text-overflow-mode ellipsis-word'

======================================================================
FAIL: test_tove: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'text-overflow ellipsis' and test: 'text-overflow-ellipsis '

======================================================================
FAIL: test_tovm:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_tovm:e (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_tovm:ew (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 923, in is_eq
    self.assertTrue(hayaku_result)
AssertionError: {} is not true

======================================================================
FAIL: test_ts: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'transform scale()' and test: '-moz-tab-size '

======================================================================
FAIL: test_tt (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'transform translate()' and test: 'text-transform '

======================================================================
FAIL: test_tt: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'transform translate()' and test: 'text-transform '

======================================================================
FAIL: test_tw:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'text-wrap none' and test: 'text-wrap normal'

======================================================================
FAIL: test_twno (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'text-wrap none' and test: 'text-wrap normal'

======================================================================
FAIL: test_vab (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'vertical-align baseline' and test: 'vertical-align bottom'

======================================================================
FAIL: test_wsn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'white-space normal' and test: 'white-space nowrap'

======================================================================
FAIL: test_z: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'zoom ' and test: 'z-index '

======================================================================
FAIL: test_z:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "hayaku_test.py", line 934, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "hayaku_test.py", line 929, in is_eq
    "hayaku: '{0}' and test: '{1}'".format('{0} {1}'.format( hayaku_result['property-name'], value_extracted), '{0} {1}'.format(*test_tuple))
AssertionError: hayaku: 'zoom auto' and test: 'z-index auto'

----------------------------------------------------------------------
Ran 839 tests in 1.591s

FAILED (failures=120)
......................................................
----------------------------------------------------------------------
Ran 54 tests in 0.004s

OK
EEE
======================================================================
ERROR: test_0 (__main__.ValuesTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "templates_test.py", line 8, in test_0
    self.assertEqual(expand_value('zoom', '1'), '1')
TypeError: expand_value() takes exactly 1 argument (2 given)

======================================================================
ERROR: test_1 (__main__.ValuesTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "templates_test.py", line 11, in test_1
    self.assertEqual(expand_value('width', '10'), '10px')
TypeError: expand_value() takes exactly 1 argument (2 given)

======================================================================
ERROR: test_2 (__main__.ValuesTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "templates_test.py", line 14, in test_2
    self.assertEqual(expand_value('font-size', '10'), '10px')
TypeError: expand_value() takes exactly 1 argument (2 given)

----------------------------------------------------------------------
Ran 3 tests in 0.000s

FAILED (errors=3)
EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
======================================================================
ERROR: test_0 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 8, in test_0
    self.assertEqual(hayaku_extract('fs'), 'font-size')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_1 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 11, in test_1
    self.assertEqual(hayaku_extract('fst'), 'font-style')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_10 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 38, in test_10
    self.assertEqual(hayaku_extract('m-1'), 'margin: -1px')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_11 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 41, in test_11
    self.assertEqual(hayaku_extract('m-.1'), 'margin: -.1em')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_12 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 44, in test_12
    self.assertEqual(hayaku_extract('m0'), 'margin: 0')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_13 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 47, in test_13
    self.assertEqual(hayaku_extract('m0.0'), 'margin: 0')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_14 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 50, in test_14
    self.assertEqual(hayaku_extract('m-0.0'), 'margin: 0')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_15 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 53, in test_15
    self.assertEqual(hayaku_extract('h1.100'), 'height: 1.1em')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_16 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 56, in test_16
    self.assertEqual(hayaku_extract('p1m'), 'padding: 1mm')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_17 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 59, in test_17
    self.assertEqual(hayaku_extract('p1%'), 'padding: 1%')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_18 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 62, in test_18
    self.assertEqual(hayaku_extract('p.23pe'), 'padding: .23%')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_19 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 65, in test_19
    self.assertEqual(hayaku_extract('p2.p'), 'padding: 2px')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_2 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 14, in test_2
    self.assertEqual(hayaku_extract('w1'), 'width: 1px')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_20 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 68, in test_20
    self.assertEqual(hayaku_extract('p2.3p'), 'padding: 2.3px')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_21 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 71, in test_21
    self.assertEqual(hayaku_extract('p3x'), 'padding: 3ex')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_22 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 74, in test_22
    self.assertEqual(hayaku_extract('p3w'), 'padding: 3vw')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_23 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 77, in test_23
    self.assertEqual(hayaku_extract('p3h'), 'padding: 3vh')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_24 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 80, in test_24
    self.assertEqual(hayaku_extract('p3c'), 'padding: 3ch')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_25 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 83, in test_25
    self.assertEqual(hayaku_extract('p3r'), 'padding: 3rem')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_26 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 86, in test_26
    self.assertEqual(hayaku_extract('p3i'), 'padding: 3in')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_27 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 89, in test_27
    self.assertEqual(hayaku_extract('p3t'), 'padding: 3pt')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_28 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 92, in test_28
    self.assertEqual(hayaku_extract('b2'), 'bottom: 2px')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_29 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 95, in test_29
    self.assertEqual(hayaku_extract('bd2'), 'border: 2px')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_3 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 17, in test_3
    self.assertEqual(hayaku_extract('w1p'), 'width: 1px')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_30 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 98, in test_30
    self.assertEqual(hayaku_extract('bw'), 'border-width: 2px')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_31 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 101, in test_31
    self.assertEqual(hayaku_extract('blw'), 'border-left-width: 2px')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_32 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 104, in test_32
    self.assertEqual(hayaku_extract('bdF'), 'border: #FFF')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_33 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 107, in test_33
    self.assertEqual(hayaku_extract('bdF'), 'border: #FFF')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_34 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 110, in test_34
    self.assertEqual(hayaku_extract('bd#0'), 'border: #000')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_35 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 113, in test_35
    self.assertEqual(hayaku_extract('baF'), 'background: #FFF')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_36 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 116, in test_36
    self.assertEqual(hayaku_extract('ba#f'), 'background: #FFF')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_37 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 119, in test_37
    self.assertEqual(hayaku_extract('ba3'), 'background: #333')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_38 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 122, in test_38
    self.assertEqual(hayaku_extract('ba3p'), 'background: 3px')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_39 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 125, in test_39
    self.assertEqual(hayaku_extract('c00'), 'color: #000')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_4 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 20, in test_4
    self.assertEqual(hayaku_extract('w1px'), 'width: 1px')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_40 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 128, in test_40
    self.assertEqual(hayaku_extract('c02'), 'color: #000')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_41 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 131, in test_41
    self.assertEqual(hayaku_extract('z1'), 'zoom: 1')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_42 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 134, in test_42
    self.assertEqual(hayaku_extract('zi1'), 'z-index: 1')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_43 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 137, in test_43
    self.assertEqual(hayaku_extract('zi-4'), 'z-index: -4')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_44 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 140, in test_44
    self.assertEqual(hayaku_extract('fs4'), 'font-size: 4px')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_5 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 23, in test_5
    self.assertEqual(hayaku_extract('w1.1'), 'width: 1.1em')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_6 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 26, in test_6
    self.assertEqual(hayaku_extract('w.1'), 'width: .1em')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_7 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 29, in test_7
    self.assertEqual(hayaku_extract('w1.0'), 'width: 1em')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_8 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 32, in test_8
    self.assertEqual(hayaku_extract('w1.'), 'width: 1em')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_9 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 35, in test_9
    self.assertEqual(hayaku_extract('w1e'), 'width: 1em')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_issue_76_1 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 152, in test_issue_76_1
    self.assertEqual(hayaku_extract('text-decoration'), 'text-decoration')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_issue_76_2 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 155, in test_issue_76_2
    self.assertEqual(hayaku_extract('border'), 'border')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_issue_83_1 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 143, in test_issue_83_1
    self.assertEqual(hayaku_extract('co'), 'color')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_issue_83_2 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 146, in test_issue_83_2
    self.assertEqual(hayaku_extract('con'), 'content')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

======================================================================
ERROR: test_issue_83_3 (__main__.SematicAbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "semantic_test.py", line 149, in test_issue_83_3
    self.assertEqual(hayaku_extract('conn'), 'content: normal;')
TypeError: hayaku_extract() takes exactly 2 arguments (1 given)

----------------------------------------------------------------------
Ran 50 tests in 0.004s

FAILED (errors=50)
